/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.54
 * Generated at: 2020-04-14 08:58:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.el;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import spms.vo.Member;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.util.LinkedList;

public final class el02_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("java.util.LinkedList");
    _jspx_imports_classes.add("spms.vo.Member");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>EL - 객체 꺼내기</title>\r\n");
      out.write("<style>\r\n");
      out.write("\tbody{ font-size:small;}\r\n");
      out.write("\ttable{\r\n");
      out.write("\t\tborder:thin solid gray;\r\n");
      out.write("\t\tborder-collapse: collapse;\r\n");
      out.write("\t}\r\n");
      out.write("\ttd, th{\r\n");
      out.write("\t\tborder:thin dotted gray;\r\n");
      out.write("\t\tpadding: 2px;\r\n");
      out.write("\t}\r\n");
      out.write("\tth{ background-color: lightgray}\r\n");
      out.write("\tpre{ font-size: 90%;}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<p>\r\n");
      out.write("\t\t<a href=\"el01.jsp\">[이전]</a>\r\n");
      out.write("\t\t<a href=\"el03.jsp\">[다음]</a>\r\n");
      out.write("\t</p>\r\n");
      out.write("\t\r\n");
      out.write("\t<h2>EL - 값 꺼내기</h2>\r\n");
      out.write("\t");

		// java 객체를 공유공간에 저장하자
		/*
		applicationScope -> ServletContext
		sessionScope	 -> HttpSession
		requestScope	 -> ServletRequest
		pageScope 		 -> JspContext
		
		1) EL 표현
		${member.no} or ${member["no"]}
		2) EL을 java로 변환
		Member member = 
			(Member)pageContext.findAttribute("member");
		int value = member.getNo();
		3) EL이 공유 공간을 탐색하는 순서
		JspContext -> ServletRequest -> HttpSession
		-> ServletContext -> null
		*/
		
		// 테스트를 위한 데이터 객체를 공유공간에 저장하자
		session.setAttribute("scores",
						new int[]{90,80,70,100});
		
		List<String> nameList = new LinkedList<String>();
		nameList.add("홍길동");
		nameList.add("임꺽정");
		nameList.add("장길산");
		session.setAttribute("nameList", nameList);
		
		Map<String,String> map = new HashMap<String,String>();
		map.put("s01", "홍길동");
		map.put("s02", "임꺽정");
		map.put("s03", "장길산");
		session.setAttribute("map", map);
		
		session.setAttribute("member", 
				new Member()
					.setNo(100)
					.setName("홍길동")
					.setEmail("hong@test.com"));
	
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t<table>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<th>대상</th>\r\n");
      out.write("\t\t\t<th>EL 코드</th>\r\n");
      out.write("\t\t\t<th>설명</th>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td>배열</td>\r\n");
      out.write("\t\t\t<td>${myArray[1]}</td>\r\n");
      out.write("\t\t\t<td>배열에서 해당 인덱스 값을 꺼낸다.<br>\r\n");
      out.write("\t\t\t\t<pre>\r\n");
      out.write("[자바 코드]\r\n");
      out.write("pageContext.setAttribute(\"scores\", new int[]{90,80,70,100});\r\n");
      out.write("\t\r\n");
      out.write("[실행 결과]\r\n");
      out.write("${scores[2]} = ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${scores[2]}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\r\n");
      out.write("\t\t\t\t</pre>\t\t\t\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td>리스트</td>\r\n");
      out.write("\t\t\t<td>${myList[2]}</td>\r\n");
      out.write("\t\t\t<td>List 객체에서 인덱스로 지정된 항목 값을 꺼낸다\r\n");
      out.write("\t\t\t\t<pre>\r\n");
      out.write("[자바 코드]\r\n");
      out.write("List<String> nameList = new LinkedList<String>();\r\n");
      out.write("nameList.add(\"홍길동\");\r\n");
      out.write("nameList.add(\"임꺽정\");\r\n");
      out.write("nameList.add(\"장길산\");\r\n");
      out.write("pageContext.setAttribute(\"nameList\", nameList);\r\n");
      out.write("\r\n");
      out.write("[실행 결과]\r\n");
      out.write("${nameList[1]} = ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${nameList[1]}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\r\n");
      out.write("\t\t\t\t</pre>\t\t\t\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td>맵</td>\r\n");
      out.write("\t\t\t<td>${myMap.keyName}</td>\r\n");
      out.write("\t\t\t<td>Map 객체에서 키에 해당하는 값을 꺼낸다.\r\n");
      out.write("\t\t\t\t<pre>\r\n");
      out.write("[자바 코드]\r\n");
      out.write("Map<String,String> map = new HashMap<String,String>();\r\n");
      out.write("map.put(\"s01\", \"홍길동\");\r\n");
      out.write("map.put(\"s02\", \"임꺽정\");\r\n");
      out.write("map.put(\"s03\", \"장길산\");\r\n");
      out.write("pageContext.setAttribute(\"map\", map);\r\n");
      out.write("\r\n");
      out.write("[실행 결과]\r\n");
      out.write("${map.s02} = ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${map.s02}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\r\n");
      out.write("\t\t\t\t</pre>\t\t\t\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td>자바Bean</td>\r\n");
      out.write("\t\t\t<td>${myObj.propName}</td>\r\n");
      out.write("\t\t\t<td>자바 객체에서 프로퍼티의 값을 꺼낸다.\r\n");
      out.write("\t\t\t\t<pre>\r\n");
      out.write("[자바 코드]\r\n");
      out.write("pageContext.setAttribute(\"member\", \r\n");
      out.write("\t\tnew Member()\r\n");
      out.write("\t\t\t.setNo(100)\r\n");
      out.write("\t\t\t.setName(\"홍길동\")\r\n");
      out.write("\t\t\t.setEmail(\"hong@test.com\"));\r\n");
      out.write("\r\n");
      out.write("[실행 결과]\r\n");
      out.write("${member.email} = ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${member.email}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t</pre>\t\t\t\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t</table>\r\n");
      out.write("\t\r\n");
      out.write("\t<p>\r\n");
      out.write("\t\t<a href=\"el01.jsp\">[이전]</a>\r\n");
      out.write("\t\t<a href=\"el03.jsp\">[다음]</a>\r\n");
      out.write("\t</p>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
